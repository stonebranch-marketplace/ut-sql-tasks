{
    "agent": null,
    "agentCluster": null,
    "agentClusterVar": null,
    "agentFieldsRestriction": "No Restriction",
    "agentType": "Any",
    "agentVar": null,
    "automaticOutputRetrievalFieldsRestriction": "No Restriction",
    "broadcastCluster": null,
    "broadcastClusterVar": null,
    "createConsole": false,
    "credentialFieldsRestriction": "No Restriction",
    "credentials": null,
    "credentialsVar": null,
    "description": "v1.20",
    "desktopInteract": false,
    "elevateUser": false,
    "environment": [],
    "environmentVariablesFieldsRestriction": "No Restriction",
    "exitCodeOutput": null,
    "exitCodeProcessing": "Success Exitcode Range",
    "exitCodeProcessingFieldsRestriction": "No Restriction",
    "exitCodeText": null,
    "exitCodes": "0",
    "fields": [
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 1",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Database Name",
            "name": "database",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 0,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "75f7105cd58940339cda100950d703e3"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Script Field 1",
            "fieldType": "Script",
            "fieldValue": "oracle_block",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Script",
            "name": "script",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 1,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "1b37775fc741441bbcf56b158fb30acf"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "INFO",
                    "sequence": 0,
                    "sysId": "30be638b014a4139934aed8044306738",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "DEBUG",
                    "sequence": 1,
                    "sysId": "3e28d21c9141417c9eae8353e467ad21",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "WARNING",
                    "sequence": 2,
                    "sysId": "ca551a83ae6d46519ad643fd474355a7",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "CRITICAL",
                    "sequence": 3,
                    "sysId": "3bee69dd31fb4d3d9671cef1788b5126",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ERROR",
                    "sequence": 4,
                    "sysId": "5572d91c91a94826bf75a26731149fae",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 1",
            "fieldType": "Choice",
            "fieldValue": "INFO",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Loglevel",
            "name": "loglevel",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 2,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "35be55fd217d40aca622974722d52058"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 2",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Server",
            "name": "server",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 3,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "d4b0b4d7233d448eb506c5e99942cf36"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 3",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Database Port",
            "name": "database_port",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 4,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "bc3fc741aa7a4595b93d8f3bbe25083a"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 1",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Database Credentials",
            "name": "credentials",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 5,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "28da28f882044fbdab431009a5245d1c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "SQL Server Native Client 11.0",
                    "sequence": 0,
                    "sysId": "0bc2ec670d4641b2a3dea096f7f3c6d7",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ODBC Driver 17 for SQL Server",
                    "sequence": 1,
                    "sysId": "83f99fc97ac4416e99c719704fea30fe",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "MySQL ODBC 8.0 Unicode Driver",
                    "sequence": 2,
                    "sysId": "9c553432b57340058ab44175bf616ce2",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "PostgreSQL Unicode",
                    "sequence": 3,
                    "sysId": "df7b07ff471d4a0e8956ba8b700abeca",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 2",
            "fieldType": "Choice",
            "fieldValue": "ODBC Driver 17 for SQL Server",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "ODBC Drivername",
            "name": "odbc_drivername",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 6,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "mysql,sqlserver,postgresql",
            "sysId": "c0437f5e3ea04a89b0dbe85e26f01f03"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Boolean Field 1",
            "fieldType": "Boolean",
            "fieldValue": "false",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Get Output",
            "name": "getoutput",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 7,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "a64a995d425b44cea89b717c21669fa9"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "oracle",
                    "sequence": 0,
                    "sysId": "9bd7ae0973204a2482d87b95ce28b408",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "mysql",
                    "sequence": 1,
                    "sysId": "2762873dac72486e84e3ee5a269b1d36",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "sqlserver",
                    "sequence": 2,
                    "sysId": "9ddab5b8a40d4ba3b68dc54bd928f4ee",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "postgresql",
                    "sequence": 3,
                    "sysId": "31e56e4922d04f5892d64b7cd3456940",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "hana",
                    "fieldValueLabel": "SAP HANA",
                    "sequence": 4,
                    "sysId": "1aed8d90e53446f8a3ec243cb96d9ea3",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 3",
            "fieldType": "Choice",
            "fieldValue": "oracle",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Database Type",
            "name": "database_type",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 8,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "d9d7d971376a40b8b0e58d841f610466"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "sqlscript",
                    "sequence": 0,
                    "sysId": "99dcca1096304c39ac4da5b03eb2ea28",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "plsqlblock",
                    "sequence": 1,
                    "sysId": "f86fc7e6d41e471b96a8a9b0fb638a7c",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 4",
            "fieldType": "Choice",
            "fieldValue": "sqlscript",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Script Type",
            "name": "scripttype",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 9,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "oracle",
            "sysId": "c4d89c9c1ea64bcc92ff23e8d7f8515f"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "sqlserver",
                    "fieldValueLabel": "SQLSERVER - SQLServer Authentication",
                    "sequence": 0,
                    "sysId": "f58a95e3096f42d89f241749b60272b9",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "windows",
                    "fieldValueLabel": "SQLSERVER - Windows Authentication",
                    "sequence": 1,
                    "sysId": "82ca40e9ba544523b63adefb8d1724cd",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "oracle",
                    "fieldValueLabel": "ORACLE - Authentication by Oracle Database",
                    "sequence": 2,
                    "sysId": "ba24ec83e100450baf58468be04b9d12",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 5",
            "fieldType": "Choice",
            "fieldValue": "sqlserver",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Authentication",
            "name": "authentication",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 10,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "sqlserver",
            "sysId": "f78805378c95434e9f01100fe2b7846c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "cx_Oracle.SYSDBA",
                    "fieldValueLabel": "sysdba",
                    "sequence": 0,
                    "sysId": "d8e59d3a3746489ea1087bccf223a4e1",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "cx_Oracle.SYSASM",
                    "fieldValueLabel": "sysasm",
                    "sequence": 1,
                    "sysId": "fb6ed268992541c396aab021ef6be147",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "cx_Oracle.SYSOPER",
                    "fieldValueLabel": "sysoper",
                    "sequence": 2,
                    "sysId": "45d7cf109c1e458d9ec656db336f83fb",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "cx_Oracle.SYSBKP",
                    "fieldValueLabel": "sysbkp",
                    "sequence": 3,
                    "sysId": "76350fdf00334170b6133e2279f0355f",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "cx_Oracle.SYSDGD",
                    "fieldValueLabel": "sysdgd",
                    "sequence": 4,
                    "sysId": "fd5dd93e11c940d9b4dc22b3af42ee4e",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "cx_Oracle.SYSKMT",
                    "fieldValueLabel": "syskmt",
                    "sequence": 5,
                    "sysId": "d8d8d11bb3df4a2d951ee0b86f8c05a9",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "None",
                    "sequence": 6,
                    "sysId": "8b480b3fb48c49b19949f86fd599cf3a",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 7",
            "fieldType": "Choice",
            "fieldValue": "cx_Oracle.SYSDBA",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Connection Authorization Mode, e.g. cx_Oracle.SYSDBA",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Mode",
            "name": "connection_mode",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 11,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "oracle",
            "sysId": "3ec3d9a21cce401786944816e96762cb"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "\";\"",
                    "fieldValueLabel": "Semicolon",
                    "sequence": 0,
                    "sysId": "c82898c667bd449492a4f7088da7473c",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "\",\"",
                    "fieldValueLabel": "Comma",
                    "sequence": 1,
                    "sysId": "300d33d8f99647fdbd5de7c9d761a4cc",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "\" \"",
                    "fieldValueLabel": "Whitespace",
                    "sequence": 2,
                    "sysId": "a0678d48b15d46f1841c20312770c82e",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "\"#\"",
                    "fieldValueLabel": "Hash \"#\"",
                    "sequence": 3,
                    "sysId": "75c6190c359f45b5afd16bac55e3053f",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 6",
            "fieldType": "Choice",
            "fieldValue": "\";\"",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Column Separator",
            "name": "colsep",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 12,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "hana",
            "sysId": "37ab3fc4bfcb4ea89704793c8682fdab"
        }
    ],
    "name": "ut-sql-tasks",
    "outputFailureOnly": false,
    "outputReturnFile": null,
    "outputReturnNline": "100",
    "outputReturnSline": "1",
    "outputReturnText": null,
    "outputReturnType": "NONE",
    "outputType": "STDOUT",
    "runtimeDir": null,
    "script": null,
    "scriptTypeWindows": "uapy",
    "scriptUnix": "#!/opt/universal/python3.6/bin/python3\n# !/usr/bin/python\n###################################################\n#\n#    Name: ut_execute_dbscript.py\n#\n#    Purpose: execute an oracle, sqlserver db script\n#\n#\n#    Prerequisites:\n#     - Universal Agent for Windows/Linux\n#     - Python 3.7.x and higher\n#     - ODBC driver (https://docs.microsoft.com/de-de/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017)\n#     - yum -y install gcc gcc-c++ kernel-devel for pyodbc\n#     - requires on windows oracle instant client Version 18.3.0.0.0 http://www.oracle.com/technetwork/topics/winx64soft-089540.html\n#     - requires on windows Visual Studio VS 2013 https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads#bookmark-vs2013\n#     - check the odbc drivername in /etc/odbcinst.ini\n#     - Requires the Python modules via pip\n#     - pip install pyodbc\n#     - pip install datetime\n#     - pip install argparse\n#     - pip install logging\n#\n#     Version History:\n#\n#     1.0  Nils Buer    2018-09-05  initial version\n#     1.1  Nils Buer    2019-09-12  windows authentication added\n#     1.3  Nils Buer    2019-09-16  names for authentication adjusted\n#     1.4  Nils Buer    2019-09-17  SET NOCOUNT ON added\n#     1.5  A.Saglam     2020-05-18  Update for Oracle call, corrections, added mode\n#     1.6  A.Saglam     2020-05-19  Added commit call to oracle sql if no output\n#     1.7  A.Saglam     2020-10-23  activated Postgresql\n#     1.8   ASA NBU     2020-10-26  merged SAP HANA into here\n#     1.9   ASA NBU     2020-10-26  bugfix\n#     1.10  ASA NBU     2020-10-27  bugfix\n#     1.11  ASA NBU     2020-10-27  bugfix\n#     1.12  ASA NBU     2020-10-27  bugfix\n#     1.13  ASA NBU     2020-10-27  bugfix\n#     1.14  ASA NBU     2020-10-29  bugfix\n#     1.15  ASA NBU     2020-10-29  Mode added for function execute_oracle_block_plsql\n#     1.16  ASA NBU     2020-11-02  Authentication for oracle removed in choice\n#     1.17  ASA         2020-11-12  conditional import\n#     1.18  NBU         2020-12-18  SAP bugfix\n#     1.19  NBU, AS     2020-12-21  NO COUNT removed\n#     1.20  NBU         2021-01-11  debug print (noCount + script_data) outcommented\n####################################################\nimport logging\nimport sys\n# import cx_Oracle\n# import pyodbc\n# from hdbcli import dbapi\n\ngl_version = \"1.20\"\ngl_variable_prefix = \"var\"\n#\n\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\ndef global_imports():\n    if \"${ops_var_database_type}\" == \"oracle\":\n        global cx_Oracle\n        import cx_Oracle\n    elif \"${ops_var_database_type}\" in \"mysql,postgresql,sqlserver\":\n        global pyodbc\n        import pyodbc\n    elif \"${ops_var_database_type}\" == \"hana\":\n        global dbapi\n        from hdbcli import dbapi\n    pass\n\n# -- Main Logic Function\ndef main():\n    \"\"\"calls the required functions to run the stored procedures\"\"\"\n    global_imports()\n    print_variables()\n    stored_procedure_type()\n\n\ndef print_variables_x():\n    logging.info(\" Executing version \" + gl_version)\n    logging.info(\" Server: ${ops_var_server}\")\n    logging.info(\" database: ${ops_var_database}\")\n    logging.info(\n        \" database port e.g. 1521 oracle, 3306 mysql, 1433 mssql: ${ops_var_database_port}\")\n    # logging.info(\" username: ${_credentialUser('${ops_var_credentials}')}\")\n    # logging.info(\" password: ${_credentialPwd('${ops_var_credentials}')}\")\n    logging.info(\" odbc driver name: ${ops_var_odbc_drivername}\")\n    logging.info(\" schema: ${ops_var_schema}\")\n    logging.info(\" Output processing: ${ops_var_getoutput}\")\n    logging.info(\" Script to execute: ${ops_var_script}\")\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\ndef stored_procedure_type():\n    logging.info(\" Connecting to ${ops_var_database_type} ...\")\n    if \"${ops_var_database_type}\" == \"oracle\":\n        if \"${ops_var_scripttype}\" == \"sqlscript\":\n            execute_oracle_block_sql()\n        elif \"${ops_var_scripttype}\" == \"plsqlblock\":\n            execute_oracle_block_plsql()\n        else:\n            logging.info(\"selections needs to be one of: sqlscript, plsqlblock\")\n            exit(1)\n    elif \"${ops_var_database_type}\" == \"mysql\":\n        execute_mysql_block()\n    elif \"${ops_var_database_type}\" == \"postgresql\":\n        execute_postgresql_block()\n    elif \"${ops_var_database_type}\" == \"sqlserver\":\n        execute_sqlserver_block()\n    elif \"${ops_var_database_type}\" == \"hana\":\n        execute_sap_hana_block()\n    else:\n        logging.error(\n            \"ERROR >>  database_type: ${ops_var_database_type} needs to be one of: oracle, mysql, sqlserver\")\n        exit(1)\n\n\ndef execute_oracle_block_plsql():\n    dsn_tns = cx_Oracle.makedsn('${ops_var_server}', '${ops_var_database_port}',\n                                service_name='${ops_var_database}')  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'.\n    logging.info(\"DSN:: %s\", str(dsn_tns))\n    try:\n        connection_mode = int(${ops_var_connection_mode})\n    except TypeError:\n        connection_mode = 0\n    if not connection_mode:\n        cnxn = cx_Oracle.connect(\n            user=r\"${_credentialUser('${ops_var_credentials}')}\",\n            password=\"${_credentialPwd('${ops_var_credentials}')}\",\n            dsn=dsn_tns)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n    else:\n        cnxn = cx_Oracle.connect(\n            user=r\"${_credentialUser('${ops_var_credentials}')}\",\n            password=\"${_credentialPwd('${ops_var_credentials}')}\",\n            dsn=dsn_tns,\n            mode=connection_mode)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n    cursor = cnxn.cursor()\n    if \"${ops_var_getoutput}\" == \"true\":\n        cursor.callproc(\"dbms_output.enable\")\n    else:\n        logging.info(\" No output processing\")\n\n    script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n    script_data = script.read()\n\n    try:\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n    except cx_Oracle.DatabaseError as err:\n        logging.error('%s' % err)\n        exit(1)\n\n    if \"${ops_var_getoutput}\" == \"true\":\n        statusVar = cursor.var(cx_Oracle.NUMBER)\n        lineVar = cursor.var(cx_Oracle.STRING)\n        while True:\n            cursor.callproc(\"dbms_output.get_line\", (lineVar, statusVar))\n            if statusVar.getvalue() != 0:\n                break\n            print(lineVar.getvalue())\n\n    cursor.close()\n    cnxn.close()\n\n\ndef execute_oracle_block_sql():\n    try:\n        dsn_tns = cx_Oracle.makedsn('${ops_var_server}',\n                                    '${ops_var_database_port}',\n                                    service_name='${ops_var_database}')  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'.\n        logging.info(\"DSN:: %s\", str(dsn_tns))\n        try:\n            connection_mode = int(${ops_var_connection_mode})\n        except TypeError:\n            connection_mode = 0\n        if not connection_mode:\n            cnxn = cx_Oracle.connect(\n                user=r\"${_credentialUser('${ops_var_credentials}')}\",\n                password=\"${_credentialPwd('${ops_var_credentials}')}\",\n                dsn=dsn_tns)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n        else:\n            cnxn = cx_Oracle.connect(\n                user=r\"${_credentialUser('${ops_var_credentials}')}\",\n                password=\"${_credentialPwd('${ops_var_credentials}')}\",\n                dsn=dsn_tns,\n                mode=connection_mode)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n        cursor = cnxn.cursor()\n        if \"${ops_var_getoutput}\" == \"true\":\n            cursor.callproc(\"dbms_output.enable\")\n        else:\n            logging.info(\" No output processing\")\n\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n\n    try:\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n    except cx_Oracle.DatabaseError as err:\n        logging.error('%s' % err)\n        exit(1)\n\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        while True:\n            row = cursor.fetchone()\n            if not row:\n                break\n            print(row)\n    else:\n        logging.info(\" No output processing\")\n        cnxn.commit()\n    logging.info(\"After Output Processing\")\n    cursor.close()\n    cnxn.close()\n\n\ndef execute_sqlserver_block():\n    try:\n        if \"${ops_var_authentication}\" == \"windows\":\n            cnxn = pyodbc.connect(\n                'DRIVER={${ops_var_odbc_drivername}};'\n                'SERVER=${ops_var_server};'\n                'DATABASE=${ops_var_database};'\n                'trusted_connection=yes')\n        elif \"${ops_var_authentication}\" == \"sqlserver\":\n            cnxn = pyodbc.connect(\"DRIVER={${ops_var_odbc_drivername}};\"\n                                  \"SERVER=${ops_var_server};\"\n                                  \"DATABASE=${ops_var_database};\"\n                                  \"UID=${_credentialUser('${ops_var_credentials}')};\"\n                                  \"PWD=${_credentialPwd('${ops_var_credentials}')}\")\n\n\n        else:\n            logging.error(\n                \"ERROR >> authentication: needs to be one of: windows, sqlserver\")\n        cursor = cnxn.cursor()\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n        noCount = \"\"\" SET NOCOUNT ON; \"\"\"\n        # print (noCount + script_data)\n        #cursor.execute(noCount + script_data)\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n    except pyodbc.Error as err:\n        logging.error('%s' % err)\n        exit(1)\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        try:\n            row = cursor.fetchone()\n            while row is not None:\n                print(row)\n                row = cursor.fetchone()\n        except pyodbc.ProgrammingError as e:\n            logging.warning(\" No output message: \" + str(e))\n    # Close and delete cursor\n    cnxn.commit()\n    cursor.close()\n    # Close Connection\n    cnxn.close()\n\n\ndef execute_mysql_block():\n    try:\n        cnxn = pyodbc.connect(\"DRIVER={${ops_var_odbc_drivername}};\"\n                              \"SERVER=${ops_var_server};\"\n                              \"DATABASE=${ops_var_database};\"\n                              \"UID=${_credentialUser('${ops_var_credentials}')};\"\n                              \"PWD=${_credentialPwd('${ops_var_credentials}')};\"\n                              \"PORT=${ops_var_database_port};\"\n                              \"SslMode=none;\"\n                              )\n        cursor = cnxn.cursor()\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n        # noCount = \"\"\" SET NOCOUNT ON; \"\"\"\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n        cnxn.commit()\n    except pyodbc.Error as err:\n        logging.error('%s' % err)\n        exit(1)\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        try:\n            row = cursor.fetchone()\n            while row is not None:\n                print(row)\n                row = cursor.fetchone()\n        except pyodbc.ProgrammingError as e:\n            logging.warning(\" No output message: \" + str(e))\n    # Close and delete cursor\n    cursor.close()\n    # Close Connection\n    cnxn.close()\n\n\ndef execute_postgresql_block():\n    try:\n        cnxn = pyodbc.connect(\"DRIVER={${ops_var_odbc_drivername}};\"\n                              \"SERVER=${ops_var_server};\"\n                              \"DATABASE=${ops_var_database};\"\n                              \"UID=${_credentialUser('${ops_var_credentials}')};\"\n                              \"PWD=${_credentialPwd('${ops_var_credentials}')};\"\n                              \"PORT=${ops_var_database_port};\")\n        cursor = cnxn.cursor()\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n        # noCount = \"\"\" SET NOCOUNT ON; \"\"\"\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n        cnxn.commit()\n    except pyodbc.Error as err:\n        logging.error('%s' % err)\n        exit(1)\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        try:\n            row = cursor.fetchone()\n            while row is not None:\n                print(row)\n                row = cursor.fetchone()\n        except pyodbc.ProgrammingError as e:\n            logging.warning(\" No output message: \" + str(e))\n    # Close and delete cursor\n    cursor.close()\n    # Close Connection\n    cnxn.close()\n\n\ndef execute_sap_hana_block():\n    # Initialize your connection\n    conn = dbapi.connect(\n        address='${ops_var_server}',\n        port='${ops_var_database_port}',\n        user=\"${_credentialUser('${ops_var_credentials}')}\",\n        password=\"${_credentialPwd('${ops_var_credentials}')}\"\n    )\n    # If no errors, print connected\n    logging.info(f\"Connection Status is: {conn.isconnected()}\")\n    script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n    script_data = script.read()\n    cursor = conn.cursor()\n    # sql_command = \"SELECT * FROM SYS.RS_TABLES_;\"\n    try:\n        column_separator = str(${ops_var_colsep})\n    except TypeError:\n        column_separator = \",\"\n\n    cursor = conn.cursor()\n    # sql_command = \"SELECT * FROM SYS.RS_TABLES_;\"\n    try:\n        cursor.execute(script_data)\n        #for row in cursor:\n        #    print(row)\n    except Exception as exception:\n        logging.error(\"Error message: \" + str(exception))\n        exit(1)\n    try:\n        rows = cursor.fetchall()\n        for row in rows:\n            for i, col in enumerate(row):\n                # print (\"%s\" % col, end=\" \")\n                print(f\"{col}\", end=column_separator if i != len(row) - 1 else \"\")\n            print(\" \")\n    except Exception as exception:\n        logging.warning(\" No output message: \" + str(exception))\n    cursor.close()\n    conn.close()\n    pass\n\n\n# --\nif __name__ == '__main__':\n    main()\n",
    "scriptWindows": "#!/opt/universal/python3.6/bin/python3\n# !/usr/bin/python\n###################################################\n#\n#    Name: ut_execute_dbscript.py\n#\n#    Purpose: execute an oracle, sqlserver db script\n#\n#\n#    Prerequisites:\n#     - Universal Agent for Windows/Linux\n#     - Python 3.7.x and higher\n#     - ODBC driver (https://docs.microsoft.com/de-de/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017)\n#     - yum -y install gcc gcc-c++ kernel-devel for pyodbc\n#     - requires on windows oracle instant client Version 18.3.0.0.0 http://www.oracle.com/technetwork/topics/winx64soft-089540.html\n#     - requires on windows Visual Studio VS 2013 https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads#bookmark-vs2013\n#     - check the odbc drivername in /etc/odbcinst.ini\n#     - Requires the Python modules via pip\n#     - pip install pyodbc\n#     - pip install datetime\n#     - pip install argparse\n#     - pip install logging\n#\n#     Version History:\n#\n#     1.0  Nils Buer    2018-09-05  initial version\n#     1.1  Nils Buer    2019-09-12  windows authentication added\n#     1.3  Nils Buer    2019-09-16  names for authentication adjusted\n#     1.4  Nils Buer    2019-09-17  SET NOCOUNT ON added\n#     1.5  A.Saglam     2020-05-18  Update for Oracle call, corrections, added mode\n#     1.6  A.Saglam     2020-05-19  Added commit call to oracle sql if no output\n#     1.7  A.Saglam     2020-10-23  activated Postgresql\n#     1.8   ASA NBU     2020-10-26  merged SAP HANA into here\n#     1.9   ASA NBU     2020-10-26  bugfix\n#     1.10  ASA NBU     2020-10-27  bugfix\n#     1.11  ASA NBU     2020-10-27  bugfix\n#     1.12  ASA NBU     2020-10-27  bugfix\n#     1.13  ASA NBU     2020-10-27  bugfix\n#     1.14  ASA NBU     2020-10-29  bugfix\n#     1.15  ASA NBU     2020-10-29  Mode added for function execute_oracle_block_plsql\n#     1.16  ASA NBU     2020-11-02  Authentication for oracle removed in choice\n#     1.17  ASA         2020-11-12  conditional import\n#     1.18  NBU         2020-12-18  SAP bugfix\n#     1.19  NBU, AS     2020-12-21  NO COUNT removed\n#     1.20  NBU         2021-01-11  debug print (noCount + script_data) outcommented\n####################################################\nimport logging\nimport sys\n# import cx_Oracle\n# import pyodbc\n# from hdbcli import dbapi\n\ngl_version = \"1.20\"\ngl_variable_prefix = \"var\"\n#\n\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\ndef global_imports():\n    if \"${ops_var_database_type}\" == \"oracle\":\n        global cx_Oracle\n        import cx_Oracle\n    elif \"${ops_var_database_type}\" in \"mysql,postgresql,sqlserver\":\n        global pyodbc\n        import pyodbc\n    elif \"${ops_var_database_type}\" == \"hana\":\n        global dbapi\n        from hdbcli import dbapi\n    pass\n\n# -- Main Logic Function\ndef main():\n    \"\"\"calls the required functions to run the stored procedures\"\"\"\n    global_imports()\n    print_variables()\n    stored_procedure_type()\n\n\ndef print_variables_x():\n    logging.info(\" Executing version \" + gl_version)\n    logging.info(\" Server: ${ops_var_server}\")\n    logging.info(\" database: ${ops_var_database}\")\n    logging.info(\n        \" database port e.g. 1521 oracle, 3306 mysql, 1433 mssql: ${ops_var_database_port}\")\n    # logging.info(\" username: ${_credentialUser('${ops_var_credentials}')}\")\n    # logging.info(\" password: ${_credentialPwd('${ops_var_credentials}')}\")\n    logging.info(\" odbc driver name: ${ops_var_odbc_drivername}\")\n    logging.info(\" schema: ${ops_var_schema}\")\n    logging.info(\" Output processing: ${ops_var_getoutput}\")\n    logging.info(\" Script to execute: ${ops_var_script}\")\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\ndef stored_procedure_type():\n    logging.info(\" Connecting to ${ops_var_database_type} ...\")\n    if \"${ops_var_database_type}\" == \"oracle\":\n        if \"${ops_var_scripttype}\" == \"sqlscript\":\n            execute_oracle_block_sql()\n        elif \"${ops_var_scripttype}\" == \"plsqlblock\":\n            execute_oracle_block_plsql()\n        else:\n            logging.info(\"selections needs to be one of: sqlscript, plsqlblock\")\n            exit(1)\n    elif \"${ops_var_database_type}\" == \"mysql\":\n        execute_mysql_block()\n    elif \"${ops_var_database_type}\" == \"postgresql\":\n        execute_postgresql_block()\n    elif \"${ops_var_database_type}\" == \"sqlserver\":\n        execute_sqlserver_block()\n    elif \"${ops_var_database_type}\" == \"hana\":\n        execute_sap_hana_block()\n    else:\n        logging.error(\n            \"ERROR >>  database_type: ${ops_var_database_type} needs to be one of: oracle, mysql, sqlserver\")\n        exit(1)\n\n\ndef execute_oracle_block_plsql():\n    dsn_tns = cx_Oracle.makedsn('${ops_var_server}', '${ops_var_database_port}',\n                                service_name='${ops_var_database}')  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'.\n    logging.info(\"DSN:: %s\", str(dsn_tns))\n    try:\n        connection_mode = int(${ops_var_connection_mode})\n    except TypeError:\n        connection_mode = 0\n    if not connection_mode:\n        cnxn = cx_Oracle.connect(\n            user=r\"${_credentialUser('${ops_var_credentials}')}\",\n            password=\"${_credentialPwd('${ops_var_credentials}')}\",\n            dsn=dsn_tns)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n    else:\n        cnxn = cx_Oracle.connect(\n            user=r\"${_credentialUser('${ops_var_credentials}')}\",\n            password=\"${_credentialPwd('${ops_var_credentials}')}\",\n            dsn=dsn_tns,\n            mode=connection_mode)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n    cursor = cnxn.cursor()\n    if \"${ops_var_getoutput}\" == \"true\":\n        cursor.callproc(\"dbms_output.enable\")\n    else:\n        logging.info(\" No output processing\")\n\n    script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n    script_data = script.read()\n\n    try:\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n    except cx_Oracle.DatabaseError as err:\n        logging.error('%s' % err)\n        exit(1)\n\n    if \"${ops_var_getoutput}\" == \"true\":\n        statusVar = cursor.var(cx_Oracle.NUMBER)\n        lineVar = cursor.var(cx_Oracle.STRING)\n        while True:\n            cursor.callproc(\"dbms_output.get_line\", (lineVar, statusVar))\n            if statusVar.getvalue() != 0:\n                break\n            print(lineVar.getvalue())\n\n    cursor.close()\n    cnxn.close()\n\n\ndef execute_oracle_block_sql():\n    try:\n        dsn_tns = cx_Oracle.makedsn('${ops_var_server}',\n                                    '${ops_var_database_port}',\n                                    service_name='${ops_var_database}')  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'.\n        logging.info(\"DSN:: %s\", str(dsn_tns))\n        try:\n            connection_mode = int(${ops_var_connection_mode})\n        except TypeError:\n            connection_mode = 0\n        if not connection_mode:\n            cnxn = cx_Oracle.connect(\n                user=r\"${_credentialUser('${ops_var_credentials}')}\",\n                password=\"${_credentialPwd('${ops_var_credentials}')}\",\n                dsn=dsn_tns)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n        else:\n            cnxn = cx_Oracle.connect(\n                user=r\"${_credentialUser('${ops_var_credentials}')}\",\n                password=\"${_credentialPwd('${ops_var_credentials}')}\",\n                dsn=dsn_tns,\n                mode=connection_mode)  # if needed, place an 'r' before any parameter in order to address any special character such as '\\'. For example, if your user name contains '\\', you'll need to place 'r' before the user name: user=r'User Name'\n        cursor = cnxn.cursor()\n        if \"${ops_var_getoutput}\" == \"true\":\n            cursor.callproc(\"dbms_output.enable\")\n        else:\n            logging.info(\" No output processing\")\n\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n\n    try:\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n    except cx_Oracle.DatabaseError as err:\n        logging.error('%s' % err)\n        exit(1)\n\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        while True:\n            row = cursor.fetchone()\n            if not row:\n                break\n            print(row)\n    else:\n        logging.info(\" No output processing\")\n        cnxn.commit()\n    logging.info(\"After Output Processing\")\n    cursor.close()\n    cnxn.close()\n\n\ndef execute_sqlserver_block():\n    try:\n        if \"${ops_var_authentication}\" == \"windows\":\n            cnxn = pyodbc.connect(\n                'DRIVER={${ops_var_odbc_drivername}};'\n                'SERVER=${ops_var_server};'\n                'DATABASE=${ops_var_database};'\n                'trusted_connection=yes')\n        elif \"${ops_var_authentication}\" == \"sqlserver\":\n            cnxn = pyodbc.connect(\"DRIVER={${ops_var_odbc_drivername}};\"\n                                  \"SERVER=${ops_var_server};\"\n                                  \"DATABASE=${ops_var_database};\"\n                                  \"UID=${_credentialUser('${ops_var_credentials}')};\"\n                                  \"PWD=${_credentialPwd('${ops_var_credentials}')}\")\n\n\n        else:\n            logging.error(\n                \"ERROR >> authentication: needs to be one of: windows, sqlserver\")\n        cursor = cnxn.cursor()\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n        noCount = \"\"\" SET NOCOUNT ON; \"\"\"\n        # print (noCount + script_data)\n        #cursor.execute(noCount + script_data)\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n    except pyodbc.Error as err:\n        logging.error('%s' % err)\n        exit(1)\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        try:\n            row = cursor.fetchone()\n            while row is not None:\n                print(row)\n                row = cursor.fetchone()\n        except pyodbc.ProgrammingError as e:\n            logging.warning(\" No output message: \" + str(e))\n    # Close and delete cursor\n    cnxn.commit()\n    cursor.close()\n    # Close Connection\n    cnxn.close()\n\n\ndef execute_mysql_block():\n    try:\n        cnxn = pyodbc.connect(\"DRIVER={${ops_var_odbc_drivername}};\"\n                              \"SERVER=${ops_var_server};\"\n                              \"DATABASE=${ops_var_database};\"\n                              \"UID=${_credentialUser('${ops_var_credentials}')};\"\n                              \"PWD=${_credentialPwd('${ops_var_credentials}')};\"\n                              \"PORT=${ops_var_database_port};\"\n                              \"SslMode=none;\"\n                              )\n        cursor = cnxn.cursor()\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n        # noCount = \"\"\" SET NOCOUNT ON; \"\"\"\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n        cnxn.commit()\n    except pyodbc.Error as err:\n        logging.error('%s' % err)\n        exit(1)\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        try:\n            row = cursor.fetchone()\n            while row is not None:\n                print(row)\n                row = cursor.fetchone()\n        except pyodbc.ProgrammingError as e:\n            logging.warning(\" No output message: \" + str(e))\n    # Close and delete cursor\n    cursor.close()\n    # Close Connection\n    cnxn.close()\n\n\ndef execute_postgresql_block():\n    try:\n        cnxn = pyodbc.connect(\"DRIVER={${ops_var_odbc_drivername}};\"\n                              \"SERVER=${ops_var_server};\"\n                              \"DATABASE=${ops_var_database};\"\n                              \"UID=${_credentialUser('${ops_var_credentials}')};\"\n                              \"PWD=${_credentialPwd('${ops_var_credentials}')};\"\n                              \"PORT=${ops_var_database_port};\")\n        cursor = cnxn.cursor()\n        script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n        script_data = script.read()\n        # noCount = \"\"\" SET NOCOUNT ON; \"\"\"\n        cursor.execute(script_data)\n        logging.info(\" script: ${ops_var_script} executed\")\n        cnxn.commit()\n    except pyodbc.Error as err:\n        logging.error('%s' % err)\n        exit(1)\n    except Exception as exception:\n        logging.error('%s' % exception)\n        exit(1)\n    # print result\n    if \"${ops_var_getoutput}\" == \"true\":\n        try:\n            row = cursor.fetchone()\n            while row is not None:\n                print(row)\n                row = cursor.fetchone()\n        except pyodbc.ProgrammingError as e:\n            logging.warning(\" No output message: \" + str(e))\n    # Close and delete cursor\n    cursor.close()\n    # Close Connection\n    cnxn.close()\n\n\ndef execute_sap_hana_block():\n    # Initialize your connection\n    conn = dbapi.connect(\n        address='${ops_var_server}',\n        port='${ops_var_database_port}',\n        user=\"${_credentialUser('${ops_var_credentials}')}\",\n        password=\"${_credentialPwd('${ops_var_credentials}')}\"\n    )\n    # If no errors, print connected\n    logging.info(f\"Connection Status is: {conn.isconnected()}\")\n    script = open(r'''${_scriptPath('${ops_var_script}')}''', 'r')\n    script_data = script.read()\n    cursor = conn.cursor()\n    # sql_command = \"SELECT * FROM SYS.RS_TABLES_;\"\n    try:\n        column_separator = str(${ops_var_colsep})\n    except TypeError:\n        column_separator = \",\"\n\n    cursor = conn.cursor()\n    # sql_command = \"SELECT * FROM SYS.RS_TABLES_;\"\n    try:\n        cursor.execute(script_data)\n        #for row in cursor:\n        #    print(row)\n    except Exception as exception:\n        logging.error(\"Error message: \" + str(exception))\n        exit(1)\n    try:\n        rows = cursor.fetchall()\n        for row in rows:\n            for i, col in enumerate(row):\n                # print (\"%s\" % col, end=\" \")\n                print(f\"{col}\", end=column_separator if i != len(row) - 1 else \"\")\n            print(\" \")\n    except Exception as exception:\n        logging.warning(\" No output message: \" + str(exception))\n    cursor.close()\n    conn.close()\n    pass\n\n\n# --\nif __name__ == '__main__':\n    main()\n",
    "sysId": "60ac23256cae44edb21ed0c6917071ed",
    "useCommonScript": false,
    "variablePrefix": "var",
    "waitForOutput": false
}